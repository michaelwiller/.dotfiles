#!/usr/bin/env bash



__pgenv::pg_create_env(){

	cat <<EOF > $PGENV_CONF
# pgenv: format
# name#__pg_service#__pg_bin#__pg_data#__pg_ldflags#pg_cppflags
16#postgresql@16#/opt/homebrew/opt/postgresql@16/bin#/opt/homebrew/var/postgresql@16#/opt/homebrew/opt/postgresql@16/lib#/opt/homebrew/opt/postgresql@16/include
17#postgresql@17#/opt/homebrew/opt/postgresql@17/bin#/opt/homebrew/var/postgresql@17#/opt/homebrew/opt/postgresql@17/lib#/opt/homebrew/opt/postgresql@17/include
EOF
}

__pgenv::list_env(){
	local _old_ifs=$IFS
	IFS='
'
	local l srv srvs=""
	local pattern="($1)#([^#]*)#([^#]*)#([^#]*)#([^#]*)"
	for l in $(cat $PGENV_CONF); do
		if [[ "$l" =~ $pattern ]]; then
		echo $l
		echo rematch: $BASH_REMATCH[1]
			srv=$(echo $l | cut -d '#' -f 1)
			srvs="$srvs $srv"
		fi
	done
	echo "versions: ${srvs:1}"
	IFS=$_old_ifs
}


__pgenv::read_env(){
	local name=$1
	local line=$2
	local pattern="($1)#([^#]*)#([^#]*)#([^#]*)#([^#]*)"
	_pg_name=""
	if [[ "$line" =~  $pattern ]]
	then
		__pg_name=$1
		__pg_service=${BASH_REMATCH[1]}
		__pg_bin=${BASH_REMATCH[2]}
		__pg_data=${BASH_REMATCH[3]}
		__pg_ldflags=${BASH_REMATCH[4]}
		__pg_cppflags=${BASH_REMATCH[5]}

	#	__pg_service=$(echo $a | cut -d '#' -f 1)
	#	__pg_bin=$(echo $a | cut -d '#' -f 2)
	#	__pg_data=$(echo $a | cut -d '#' -f 3)
	#	__pg_ldflags=$(echo $a | cut -d '#' -f 4)
	#	__pg_cppflags=$(echo $a | cut -d '#' -f 5)
	fi
}

__pgenv::get_env(){
	local _old_ifs=$IFS
	export IFS='
'
	for line in $(cat $PGENV_CONF); do
		__pgenv::read_env "$1" "$line"
		if [[ "$__pg_service" == "$1" ]]; then
			return
		fi
	done
	export IFS=$_old_ifs
}

__pgenv::clean_env(){
	echo "${1%$2}"
}

__pgenv::set_env(){
	if [[ ! -z $PGENV_CURRENT ]]; then
		__pgenv::get_env $PGENV_CURRENT
		PATH=$(__pgenv::clean_env "$PATH" ":\*$__pg_bin")
		LDFLAGS=$(__pgenv::clean_env "$LDFLAGS" "$__pg_ldflags")
		CPPFLAGS=$(__pgenv::clean_env "$CPPFLAGS" "$__pg_cppflags")
	fi

	_pgenv::get_env $1
	export PATH="$__pg_service:$PATH"
	export LDFLAGS="$__pg_ldflags $LDFLAGS"
	export CPPFLAGS="$__pg_cppflags $CPPFLAGS"
}


main(){
	case $1 in
		create)
			__pgenv::create_env
			;;
		set)
			__pgenv::set_env $2
			;;
		read) 
			__pgenv::get_env $2
			echo srv: $__pg_service
			echo bin: $__pg_bin
			echo data: $__pg_data
			echo ld: $__pg_ldflags
			echo cpp: $__pg_cppflags
			;;
		list) 
			__pgenv::list_env
			;;
		*)
			echo ??
	esac
}

readonly PGENV_CONF=~/.pgenv
main "$@"